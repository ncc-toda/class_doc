---
description: this file explains common development concepts. please always refer to this file.
globs: *
alwaysApply: true
---

# 001_development_common.mdc
- このファイルが読み込まれたら必ず「001_development_common.mdcを読み込みました！」と作業着手前にユーザーに必ず伝えてください。


## 基本原則
以下のルールを遵守して下さい。

### 1. コミュニケーション
- ユーザーとのコミュニケーションは常に日本語でお願いします。

### 2. 参照禁止ファイル
- .envファイルの作成・読込・編集・削除は厳禁です。ユーザーに作業を促して下さい。
- .envファイルはプロジェクトルートに配置しています。

--


## Git運用ルール

このドキュメントでは、本プロジェクトにおける Git 運用のルールを定義します。

### ブランチ戦略

#### メインブランチ

- `main`: 本番環境用のブランチ。常に安定した状態を維持する
- `develop`: 開発用のブランチ。機能実装後のマージ先

#### 作業ブランチ

- `feature/#[issue番号]_[機能名]`: 新機能開発用
  - 例: `feature/#31_create_specification`

作業ブランチは develop ブランチから派生させ、 マージ時には develop ブランチにマージする

### コミットメッセージのルール

#### フォーマット

```txt
[type]: [内容] [emoji]
```

#### typeの種類

- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメント関連
- `style`: コードスタイルの修正（フォーマットなど）
- `refactor`: リファクタリング
- `test`: テスト関連
- `chore`: ビルドプロセスやツール関連
- `build`: ビルド関連の変更
- `ci`: CI関連の変更

#### 絵文字の例

- `:sparkles:`: ✨ (新機能)
- `:bug:`: 🐛 (バグ修正)
- `:memo:`: 📝 (ドキュメント)
- `:hammer:`: 🔨 (リファクタリング)
- `:package:`: 📦 (パッケージ関連)
- `:test_tube:`: 🧪 (テスト)
- `:lipstick:`: 💄 (UI/スタイル関連)
- `:rotating_light:`: 🚨 (Lint警告対応)
- `:green_heart:`: 💚 (CI修正)
- `:recycle:`: ♻️ (コードリファクタリング)
- `:technologist:`: 👨‍💻 (開発者ツール関連)

#### コミットメッセージの例

```txt
feat: :hammer: シーズン情報を表すドメインオブジェクトを作成
docs: :memo: ゲームコンセプトをざっくり記載
build: :package: auto_route を導入
```

### Issue管理

#### Issueテンプレート

プロジェクトでは以下のIssueテンプレートを使用します：

1. **機能リクエスト** (`feature_request.md`)
   - タイトル形式: `feat: [機能名]`
   - ラベル: `enhancement`

2. **バグレポート** (`bug_report.md`)
   - タイトル形式: `bug: [バグ内容]`
   - ラベル: `bug`
   - バグ発生環境、再現手順、期待される動作などを記載

3. **その他** (`other.md`)
   - 上記に当てはまらない内容のIssue

#### GitHub CLI を使った Issue 作成

GitHub CLI を使用して Issue を作成する場合は、以下のコマンドを使用します：

```bash
# 基本的なIssue作成
gh issue create --title "feat: 機能名" --body "機能の詳細説明" --label "enhancement"

# テンプレートを使用したIssue作成
gh issue create --template "feature_request.md" --title "feat: 機能名"

# バグレポートの作成
gh issue create --template "bug_report.md" --title "bug: バグ内容" --label "bug"
```

もしユーザーからの指示で Issue の作成を求められた場合は上記コマンドを使用して作成してください。

#### Issue 作成時の注意点

- タイトルは必ず`[type]: [内容]`の形式で記載する
- 本文には十分な情報を含め、必要に応じてスクリーンショットや図を添付する
- 適切なラベルを設定する
- アサインする担当者を指定する（自分自身または他のチームメンバー）

### プルリクエスト（PR）のルール

#### PRのテンプレート

PRを作成する際は、`.github/pull_request_template.md`のテンプレートに従って以下の情報を記載します：

1. **対応するIssue**
   - `Closes #[Issue番号]`の形式で記載

2. **リンク**
   - タスク管理/整理用のNotionページや参考にしたサイト等

3. **やったこと**
   - 実装した内容の箇条書き

4. **やらなかったこと**
   - 実装しなかった内容の箇条書き

5. **ユーザーへの影響**
   - ユーザー視点での変更点

6. **動作確認**
   - 確認した環境（デバイス/OS）
   - 確認した内容（スクリーンショットや動画も可）
   - 確認しなかった（できなかった）こと

7. **その他**
   - 補足情報

#### PRのタイトル

```txt
[type]: #[issue番号] [内容]
```

例: `feat: #21 シーズン情報を表すドメインオブジェクトを作成`

#### GitHub CLIを使ったPR作成

GitHub CLIを使用してPRを作成する場合は、以下のコマンドを使用します：

```bash
# 基本的なPR作成
gh pr create --title "feat: #35 GitHub CLIルールの追加" --body "GitHub CLIを使ったIssueとPR作成のルールを追加" --base develop

# 現在のブランチからPRを作成（テンプレート使用）
gh pr create --title "feat: #35 GitHub CLIルールの追加" --body-file .github/PULL_REQUEST_TEMPLATE.md

# Issueに紐づけたPR作成
gh pr create --title "feat: #35 GitHub CLIルールの追加" --body "Closes #35" --base develop
```

#### PR作成時の注意点

- 作業ブランチが最新の`develop`ブランチと同期されていることを確認する
- PRのタイトルは必ず`[type]: #[issue番号] [内容]`の形式で記載する
- テンプレートに従って必要な情報をすべて記入する
- レビュアーを適切に設定する
- 関連するIssueを`Closes #[Issue番号]`の形式で紐づける

### マージのルール

1. **マージ条件**
   - CIチェックがパスしていること
   - 必要なレビューが完了していること

2. **マージ方法**
   - 基本的に「Squash and merge」を使用
   - コミットメッセージは`[type]: #[issue番号] [内容] [emoji]`の形式に統一

3. **マージ後**
   - 作業ブランチは削除する
   - 関連するIssueをクローズする

#### GitHub CLIを使ったPRのマージ

GitHub CLIを使用してPRをマージする場合は、以下のコマンドを使用します：

```bash
# PRをSquashマージ
gh pr merge [PR番号] --squash --delete-branch

# 現在チェックアウトしているブランチのPRをマージ
gh pr merge --squash --delete-branch
```

### リリース管理

1. **バージョニング**
   - セマンティックバージョニング（`MAJOR.MINOR.PATCH`）に従う
   - `pubspec.yaml`のバージョンを更新

2. **リリースブランチ**
   - リリース準備時に`releases/[バージョン]`ブランチを作成
   - `develop`ブランチからマージされたPRがクローズされると、自動的にタグが作成される

3. **タグ付け**
   - タグは`v[バージョン]`の形式（例: `v1.0.0`）
   - リリースノートは自動生成される

### CI/CD

1. **CI**
   - プッシュ時およびPR時に自動的にチェックが実行される
   - Markdown（`.md`）ファイルの変更のみの場合はスキップされる

2. **CD**
   - リリースブランチがマージされた際に自動的にタグ付けとリリースノート生成が行われる

### その他のルール

1. **コードレビュー**
   - PRを出す前に自己レビューを行う
   - コメントには建設的な提案を含める

2. **コンフリクト解決**
   - コンフリクトは作業ブランチ側で解決する
   - 必要に応じて`develop`ブランチを定期的にマージする

3. **GitHub CLIの活用**
   - 効率的な開発ワークフローのために、GitHub CLIを積極的に活用する
   - 主要なコマンドは以下の通り：
     ```bash
     # Issueの一覧表示
     gh issue list
     
     # 特定のIssueの詳細表示
     gh issue view [Issue番号]
     
     # PRの一覧表示
     gh pr list
     
     # 特定のPRの詳細表示
     gh pr view [PR番号]
     
     # PRのチェックアウト
     gh pr checkout [PR番号]
     
     # PRのレビュー
     gh pr review [PR番号] --approve
     ```


